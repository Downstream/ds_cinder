#include "model_maker.h"

#include <map>
#include <sstream>
#include <fstream>
#include <iostream>

#include <ds/math/random.h>
#include <ds/app/environment.h>
#include <ds/debug/logger.h>
#include <ds/query/query_client.h>
#include <ds/util/string_util.h>


namespace ds {

namespace {

const std::string baseHeader = \
"#pragma once\n#ifndef DS_MODEL_AUTOGENERATED_TableName\n"\
"#define DS_MODEL_AUTOGENERATED_TableName" \
"\n\n#include <ds/data/resource.h>\n#include <memory>\n#include <vector>\n#include <cinder/Vector.h>" \
"\n\n" \
"namespace ds {\n" \
"namespace model{\n" \
"/**\n" \
"* \\class ds::model::TableNameRef\n" \
"*			Auto-generated data model for TableName\n" \
"*/\n" \
"class TableNameRef {\n" \
"public:\n" \
"\n" \
"	TableNameRef();\n" \
"\n"
"COLUMN_GETTERS\n" \
"\n" \
"COLUMN_SETTERS\n" \
"\n" \
"\n" \
"private:\n" \
"	class Data;\n" \
"	std::shared_ptr<Data>	mData;\n" \
"};\n" \
"\n" \
"} // namespace model\n" \
"} // namespace ds\n" \
"\n" \
"#endif\n";

const std::string baseCpp = \
"#include \"TableName_model.h\" \n" \
"\n" \
"namespace ds {\n" \
"namespace model {\n" \
"namespace {\n" \
"const std::wstring					EMPTY_WSTRING;\n" \
"const std::string					EMPTY_STRING;\n" \
"const ds::Resource					EMPTY_RESOURCE;\n" \
"const ci::Vec2f						EMPTY_VEC2F;\n" \
"const std::vector<std::string>		EMPTY_STRING_VECTOR;\n" \
"}\n" \
"\n" \
"/**\n" \
"* \\class ds::model::Data\n" \
"*/\n" \
"class TableNameRef::Data {\n" \
"public:\n" \
"	Data(){}\n" \
"\n" \
"DATA_MEMBERS\n" \
"\n" \
"};\n" \
"\n" \
"TableNameRef::TableNameRef(){}\n" \
"\n" \
"\n" \
"IMP_GETTERS\n" \
"\n" \
"IMP_SETTERS\n" \
"\n" \
"\n" \
"} // namespace model\n" \
"} // namespace ds";


// Header Getters
const std::string intColumnGetter =			"	const int				getColumnName() const;";
const std::string uintColumnGetter =		"	const unsigned int		getColumnName() const;";
const std::string floatColumnGetter =		"	const float				getColumnName() const;";
const std::string stringColumnGetter =		"	const std::wstring&		getColumnName() const;";
const std::string resourceColumnGetter =	"	const ds::Resource&		getColumnName() const;";

// Header Setters
const std::string intColumnSetter =			"	TableNameRef&			setColumnName(const int ColumnName);";
const std::string uintColumnSetter =		"	TableNameRef&			setColumnName(const unsigned int ColumnName);";
const std::string floatColumnSetter =		"	TableNameRef&			setColumnName(const float ColumnName);";
const std::string stringColumnSetter =		"	TableNameRef&			setColumnName(const std::wstring& ColumnName);";
const std::string resourceColumnSetter =	"	TableNameRef&			setColumnName(const ds::Resource& ColumnName);";

// Implementation data class columns
const std::string intColumnData =			"int				mColumnName;";
const std::string uintColumnData =			"unsigned int	mColumnName;";
const std::string floatColumnData =			"float			mColumnName;";
const std::string stringColumnData =		"std::wstring	mColumnName;";
const std::string resourceColumnData =		"ds::Resource	mColumnName;";

// Getter Implementations
const std::string intGetterImplementation = "const int TableNameRef::getColumnName() const {\n" \
"	if(!mData) return 0; \n" \
"	return mData->mColumnName; \n" \
"}";

const std::string uintGetterImplementation = "const unsigned int TableNameRef::getColumnName() const {\n" \
"	if(!mData) return 0; \n" \
"	return mData->mColumnName; \n" \
"}";

const std::string floatGetterImplementation = "const float TableNameRef::getColumnName() const {\n" \
"	if(!mData) return 0.0f; \n" \
"	return mData->mColumnName; \n" \
"}";

const std::string stringGetterImplementation = "const std::wstring& TableNameRef::getColumnName() const {\n" \
"	if(!mData) return EMPTY_WSTRING; \n" \
"	return mData->mColumnName; \n" \
"}";

const std::string resourceGetterImplementation = "const ds::Resource& TableNameRef::getColumnName() const {\n" \
"	if(!mData) return EMPTY_RESOURCE; \n" \
"	return mData->mColumnName; \n" \
"}";

// Setter Implementations
const std::string intSetterImplementation = "TableNameRef& TableNameRef::setColumnName(const int ColumnName){\n" \
"	if(!mData) mData.reset(new Data()); \n" \
"	if(mData) mData->mColumnName = ColumnName; \n" \
"	return *this; \n" \
"}";

const std::string uintSetterImplementation = "TableNameRef& TableNameRef::setColumnName(const unsigned int ColumnName){\n" \
"	if(!mData) mData.reset(new Data()); \n" \
"	if(mData) mData->mColumnName = ColumnName; \n" \
"	return *this; \n" \
"}";

const std::string floatSetterImplementation = "TableNameRef& TableNameRef::setColumnName(const float ColumnName){\n" \
"	if(!mData) mData.reset(new Data()); \n" \
"	if(mData) mData->mColumnName = ColumnName; \n" \
"	return *this; \n" \
"}";

const std::string stringSetterImplementation = "TableNameRef& TableNameRef::setColumnName(const std::wstring& ColumnName){\n" \
"	if(!mData) mData.reset(new Data()); \n" \
"	if(mData) mData->mColumnName = ColumnName; \n" \
"	return *this; \n" \
"}";

const std::string resourceSetterImplementation = "TableNameRef& TableNameRef::setColumnName(const ds::Resource& ColumnName){\n" \
"	if(!mData) mData.reset(new Data()); \n" \
"	if(mData) mData->mColumnName = ColumnName; \n" \
"	return *this; \n" \
"}";
}


/**
* \class ds::ModelMaker
*/
ModelMaker::ModelMaker() {
	mYamlFileLocation = "";
}

std::string ModelMaker::replaceString(std::string& fullString, std::string toReplace, std::string replaceWith){
	return(fullString.replace(fullString.find(toReplace), toReplace.length(), replaceWith));
}

std::string ModelMaker::replaceAllString(std::string& fullString, std::string toReplace, std::string replaceWith){
	std::string returnString = fullString;
	while(returnString.find(toReplace) != std::string::npos)	{
		returnString = replaceString(returnString, toReplace, replaceWith);
	}

	return returnString;
}

void ModelMaker::run() {
	if(mYamlFileLocation.length() < 1){
		DS_LOG_WARNING("No file specified in model maker");
		return;
	}

	mYamlLoadService.mFileLocation = mYamlFileLocation;
	mYamlLoadService.run();

	std::vector<ModelModel> models = mYamlLoadService.mOutput;

	if(models.empty()){
		DS_LOG_WARNING("No valid models loaded in model maker.");
		return;
	}

	for(auto it = models.begin(); it < models.end(); ++it){
		ModelModel& mm = (*it);

		std::stringstream headerGetters;
		std::stringstream headerSetters;
		std::stringstream dataMembers;
		std::stringstream impGetters;
		std::stringstream impSetters;

		for(auto mit = mm.getResourceColumns().begin(); mit < mm.getResourceColumns().end(); ++mit){
			for(auto cit = mm.getColumns().begin(); cit < mm.getColumns().end(); ++cit){

				// if this column is the resource one, set it's type to resource and move on
				if((*cit).getColumnName() == (*mit) && ((*cit).getType() == ModelColumn::Integer || (*cit).getType() == ModelColumn::UnsignedInt)) {
					ModelColumn* mc = const_cast<ModelColumn*>(&(*cit));
					if(mc){
						mc->setType(ModelColumn::Resource);
					}
					break;
				}
			}
		}

		for(auto cit = mm.getColumns().begin(); cit < mm.getColumns().end(); ++cit){

			std::string thisHeaderGetter;
			std::string thisHeaderSetter;
			std::string thisDataMember;
			std::string thisImpGetter;
			std::string thisImpSetter;

			const ModelColumn& mc = (*cit);

			// invalid columns get tossed
			if(mc.getType() == ModelColumn::Invalid){
				continue;

			// if it's an int, check for unsigned int too
			} else if(mc.getType() == ModelColumn::Integer || mc.getType() == ModelColumn::UnsignedInt){
				if(mc.getIsUnsigned()){
					thisHeaderGetter = uintColumnGetter;
					thisHeaderSetter = uintColumnSetter;
					thisDataMember = uintColumnData;
					thisImpGetter = uintGetterImplementation;
					thisImpSetter = uintSetterImplementation;

				} else {
					thisHeaderGetter = intColumnGetter;
					thisHeaderSetter = intColumnSetter;
					thisDataMember = intColumnData;
					thisImpGetter = intGetterImplementation;
					thisImpSetter = intSetterImplementation;
				}

			} else if(mc.getType() == ModelColumn::Float){
				thisHeaderGetter = floatColumnGetter;
				thisHeaderSetter = floatColumnSetter;
				thisDataMember = floatColumnData;
				thisImpGetter = floatGetterImplementation;
				thisImpSetter = floatSetterImplementation;

			} else if(mc.getType() == ModelColumn::String){
				thisHeaderGetter = stringColumnGetter;
				thisHeaderSetter = stringColumnSetter;
				thisDataMember = stringColumnData;
				thisImpGetter = stringGetterImplementation;
				thisImpSetter = stringSetterImplementation;

			} else if(mc.getType() == ModelColumn::Resource){
				thisHeaderGetter = resourceColumnGetter;
				thisHeaderSetter = resourceColumnSetter;
				thisDataMember = resourceColumnData;
				thisImpGetter = resourceGetterImplementation;
				thisImpSetter = resourceSetterImplementation;

			}

			headerGetters << replaceAllString(thisHeaderGetter, "ColumnName", mc.getColumnName()) << std::endl;
			headerSetters << replaceAllString(thisHeaderSetter, "ColumnName", mc.getColumnName()) << std::endl;
			dataMembers << replaceAllString(thisDataMember, "ColumnName", mc.getColumnName()) << std::endl;
			impGetters << replaceAllString(thisImpGetter, "ColumnName", mc.getColumnName()) << std::endl;
			impSetters << replaceAllString(thisImpSetter, "ColumnName", mc.getColumnName()) << std::endl;

		}

		std::string header = baseHeader;
		header = replaceAllString(header, "COLUMN_GETTERS", headerGetters.str());
		header = replaceAllString(header, "COLUMN_SETTERS", headerSetters.str());
		header = replaceAllString(header, "TableName", mm.getTableName());

		//std::cout << std::endl << std::endl << header << std::endl << std::endl;




		std::string imp = baseCpp;
		imp = replaceAllString(imp, "DATA_MEMBERS", dataMembers.str());
		imp = replaceAllString(imp, "IMP_GETTERS", impGetters.str());
		imp = replaceAllString(imp, "IMP_SETTERS", impSetters.str());
		imp = replaceAllString(imp, "TableName", mm.getTableName());

	//	std::cout << std::endl << std::endl << imp << std::endl << std::endl;


		std::string lower_case_table = mm.getTableName();
		std::transform(lower_case_table.begin(), lower_case_table.end(), lower_case_table.begin(), ::tolower);
		std::stringstream filename;
		filename << "%APP%/src/generated/" << lower_case_table << "_model.h";

		std::ofstream headerWriter;
		headerWriter.open(ds::Environment::expand(filename.str()));
		headerWriter << header;
		headerWriter.close();

		filename.str("");

		filename << "%APP%/src/generated/" << lower_case_table << "_model.cpp";
		std::ofstream impWriter;
		impWriter.open(ds::Environment::expand(filename.str()));
		impWriter << imp;
		impWriter.close();
	}
}


} // namespace ds
